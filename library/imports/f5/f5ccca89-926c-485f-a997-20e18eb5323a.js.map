{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "jumpHeight",
    "jumpDuration",
    "maxMoveSpeed",
    "accel",
    "jumpAudio",
    "default",
    "url",
    "AudioClip",
    "setJumpAction",
    "jumpUp",
    "moveBy",
    "p",
    "easing",
    "easeCubicActionOut",
    "jumpDown",
    "easeCubicActionIn",
    "callback",
    "callFunc",
    "playJumpSound",
    "repeatForever",
    "sequence",
    "audioEngine",
    "playEffect",
    "setInputControl",
    "self",
    "eventManager",
    "addListener",
    "event",
    "EventListener",
    "KEYBOARD",
    "onKeyPressed",
    "keyCode",
    "KEY",
    "a",
    "accLeft",
    "accRight",
    "d",
    "onKeyReleased",
    "node",
    "onLoad",
    "jumpAction",
    "runAction",
    "xSpeed",
    "update",
    "dt",
    "Math",
    "abs",
    "x"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //main character's jump height\r\n        jumpHeight: 0,\r\n        //main character's jump duration\r\n        jumpDuration: 0,\r\n        //maximal movement speed\r\n        maxMoveSpeed: 0,\r\n        //acceleration\r\n        accel: 0,\r\n        //jumping sound effect resource\r\n        jumpAudio:{\r\n            default: null,\r\n            url: cc.AudioClip\r\n        },\r\n    },\r\n    \r\n    setJumpAction: function(){\r\n        //jump up\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0,this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        //jump down\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0,-this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        //repeat\r\n        //callback function to invoke other defined methods after\r\n        //the action is finishd\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        //repeat unceasingly, and invoke callback to play sound after landing each time\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n    \r\n    playJumpSound: function(){\r\n        //invoke sound engine to play sound\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    \r\n    setInputControl: function(){\r\n        var self = this;\r\n        //add keyboard event listener\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            //When there is a key being presseddown, judge if it's the designated directional button\r\n            //and set up acceleration in the corresponding direction\r\n            onKeyPressed: function(keyCode, event){\r\n                switch(keyCode){\r\n                    case cc.KEY.a:\r\n                        self.accLeft = true;\r\n                        self.accRight = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accLeft = false;\r\n                        self.accRight = true;\r\n                        break;\r\n                }\r\n            },\r\n            onKeyReleased: function(keyCode, event){\r\n                switch(keyCode){\r\n                    case cc.KEY.a:\r\n                        self.accLeft = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accRight = false;\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node);\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        //initialize jump action\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n        \r\n        //switch of acceleration direction\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        //current horizontal speed of main character\r\n        this.xSpeed = 0;\r\n        \r\n        //initialize keyboard input listener\r\n        this.setInputControl();\r\n    },\r\n\r\n    // called every frame\r\n    update: function (dt) {\r\n        //update speed of each frame according to the current acceleration direction\r\n        if(this.accLeft){\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if(this.accRight){\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        //restrict the movement speed of the main character to the maximum\r\n        //movement speed\r\n        if(Math.abs(this.xSpeed) > this.maxMoveSpeed){\r\n            //if speed reaches its limit, use the max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n        \r\n        //update the position of the main character according to the surrent speed\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n});\r\n"
  ]
}